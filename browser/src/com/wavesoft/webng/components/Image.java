/*
 * Image.java
 * 
 * BrowserNG - A workbench for the browser of the new generation
 * Copyright (C) 2012 Ioannis Charalampidis
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Created on Jul 19, 2012, 5:13:12 PM
 */
package com.wavesoft.webng.components;

import com.wavesoft.webng.api.WebViewNG;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.TexturePaint;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.Icon;

/**
 *
 * @author icharala
 */
public class Image extends WebViewNG {

    public enum RepeatConstants {
        None, RepeatX, RepeatY, Repeat, Stretch
    }
    
    public enum PositionConstants {
        Beginning, Center, End
    }
    
    private RepeatConstants repeat = RepeatConstants.None;
    private PositionConstants positionX = PositionConstants.Center;
    private PositionConstants positionY = PositionConstants.Center;
    private Icon image;
    private BufferedImage bImage;

    public void setRepeat(RepeatConstants repeat) {
        this.repeat = repeat;
    }

    public RepeatConstants getRepeat() {
        return repeat;
    }

    public void setPositionX(PositionConstants positionX) {
        this.positionX = positionX;
    }

    public PositionConstants getPositionX() {
        return positionX;
    }

    public void setPositionY(PositionConstants positionY) {
        this.positionY = positionY;
    }

    public PositionConstants getPositionY() {
        return positionY;
    }

    public Icon getImage() {
        return image;
    }

    public void setImage(Icon image) {
        this.image = image;
        rebuildBufferedImage();
    }
    
    private void rebuildBufferedImage() {
        int w = image.getIconWidth();
        int h = image.getIconHeight();
        this.bImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        this.image.paintIcon(this, this.bImage.getGraphics(), 0, 0);
    }

    @Override
    public void paint(Graphics grphcs) {
        if (image != null) {
            Graphics2D g2 = (Graphics2D) grphcs;
            int xP = 0;
            int yP = 0;
            int imW = image.getIconHeight();
            int imH = image.getIconHeight();
            int myW = this.getWidth();
            int myH = this.getHeight();
            
            // Calculate positions
            if (positionX == PositionConstants.Center) {
                xP = (myW - imW)/2;
            } else if (positionX == PositionConstants.End) {
                xP = myW - imW;
            }
            if (positionY == PositionConstants.Center) {
                yP = (myH - imH)/2;
            } else if (positionY == PositionConstants.End) {
                yP = myH - imH;
            }

            // Paint image
            if (repeat == RepeatConstants.None) {
                image.paintIcon(this, grphcs, xP, yP);            
                
            } else if (repeat == RepeatConstants.Stretch) {
                g2.drawImage(bImage,0, 0,  myW, myH , 0, 0, imW, imH, this);
                
            } else {
                TexturePaint tp = new TexturePaint(bImage, new Rectangle2D.Float(0f, 0f, imW, imH));
                g2.setPaint(tp);
                
                if (repeat == RepeatConstants.Repeat) {
                    g2.fillRect(0, 0, myW, myH);
                } else if (repeat == RepeatConstants.RepeatX) {
                    g2.fillRect(0, yP, myW, imH);
                } else if (repeat == RepeatConstants.RepeatY) {
                    g2.fillRect(xP, 0, imW, myH);
                }
            }
            
        }
        super.paint(grphcs);
    }
        
    /** Creates new form Image */
    public Image() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 90, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 74, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
