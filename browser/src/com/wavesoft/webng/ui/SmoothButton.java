/*
 * SmoothButton.java
 * 
 * BrowserNG - A workbench for the browser of the new generation
 * Copyright (C) 2012 Ioannis Charalampidis
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Created on Jul 19, 2012, 10:28:39 AM
 */
package com.wavesoft.webng.ui;

import com.wavesoft.webng.api.HeadButton;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import javax.swing.Icon;

/**
 *
 * @author icharala
 */
public class SmoothButton extends javax.swing.JPanel implements MouseListener, MouseMotionListener {

    private static int STATE_NONE = 0;
    private static int STATE_HOVER = 1;
    private static int STATE_DOWN = 2;
    
    private static int BORDER_RADIUS = 8;
    
    private int state = STATE_NONE;
    private Icon icon = null;
    
    private HeadButton customizations = null;
    
    /** Creates new form SmoothButton */
    public SmoothButton() {
        initComponents();
        addMouseListener(this);
        addMouseMotionListener(this);
    }

    public void setIcon(Icon icon) {
        this.icon = icon;
        repaint();
    }
    
    public Icon getIcon() {
        return this.icon;
    }
    
    public void setCustomizations(HeadButton btn) {
        customizations = btn;
        this.setIcon(btn.getIcon());
        this.setToolTipText(btn.getToolTip());
    }
    
    @Override
    public void paint(Graphics grphcs) {
        super.paint(grphcs);
        Graphics2D g2 = (Graphics2D) grphcs;
        int width = getWidth()-1;
        int height = getHeight()-1;
        
        // Enable antialias
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        if (state != STATE_NONE) {
            GradientPaint gp = null;
            if (state == STATE_HOVER) {
                
                gp = new GradientPaint(
                    0f, 0f, Colorset.G_SEL_TOP,
                    0f, height, Colorset.G_SEL_BOTTOM );
                g2.setPaint(gp);
                g2.fillRoundRect(0, 0, width, height, BORDER_RADIUS, BORDER_RADIUS);
                
                g2.setColor(Colorset.COLOR_SHADOW);
                g2.drawRoundRect(0, 0, width, height, BORDER_RADIUS, BORDER_RADIUS);
                
            } else if (state == STATE_DOWN) {
                gp = new GradientPaint(
                    0f, 0f, Colorset.COLOR_LIGHT_SHADOW,
                    0f, height, Colorset.G_UNSEL_BOTTOM );
                g2.setPaint(gp);
                g2.fillRoundRect(0, 0, width, height, BORDER_RADIUS, BORDER_RADIUS);
                g2.setColor(Colorset.COLOR_DARK_SHADOW);
                g2.drawRoundRect(0, 0, width, height, BORDER_RADIUS, BORDER_RADIUS);
            }
        }
        
        // Render icon if we have it
        if (icon != null) {
            int xP = (width - icon.getIconWidth()) / 2,
                yP = (height - icon.getIconHeight()) / 2;

            // Paint icon
            icon.paintIcon(this, grphcs, xP, yP);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(28, 28));
        setSize(new java.awt.Dimension(28, 28));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 34, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 31, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
        if (customizations != null) {
            customizations.buttonClicked();
        }
    }

    @Override
    public void mousePressed(MouseEvent me) {
        this.state = STATE_DOWN;
        repaint();
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        this.state = STATE_HOVER;
        repaint();
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        this.state = STATE_HOVER;
        repaint();
    }

    @Override
    public void mouseExited(MouseEvent me) {
        this.state = STATE_NONE;
        repaint();
    }

    @Override
    public void mouseDragged(MouseEvent me) {
    }

    @Override
    public void mouseMoved(MouseEvent me) {
    }
    
}
