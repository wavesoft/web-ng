/*
 * Browser.java
 * 
 * BrowserNG - A workbench for the browser of the new generation
 * Copyright (C) 2012 Ioannis Charalampidis
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Created on Jul 18, 2012, 2:13:48 PM
 */
package com.wavesoft.webng;

import com.wavesoft.webng.io.PublicKeyEventListener;
import com.wavesoft.webng.io.PublicKeyEventManager;
import com.wavesoft.webng.ui.BrowserFrame;
import com.wavesoft.webng.ui.ComponentMover;
import com.wavesoft.webng.ui.Tabs.TabChangeListener;
import java.awt.CardLayout;
import java.awt.KeyboardFocusManager;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.UUID;

/**
 * Basic browser class
 * @author Ioannis Charalampidis
 */
public class Browser extends javax.swing.JFrame implements ComponentListener, TabChangeListener, PublicKeyEventListener {

    ComponentMover mover;
    ArrayList<BrowserFrame> tabs;
    
    /** Creates new form Browser */
    public Browser() {
        initComponents();
        
        // Setup variables
        mover = new ComponentMover(this, tabsHead);
        tabs = new ArrayList<BrowserFrame>();
        
        // Setup listeners
        addComponentListener(this);
        tabsHead.addTabChangeListener(this);
        
        // Add the default, new tab
        addNewTab();
        
        // Register the public key manager
        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new PublicKeyEventManager(new Integer[]{
            KeyEvent.VK_R, KeyEvent.VK_W, KeyEvent.VK_T
        }));
    }

    public Browser(BrowserFrame frame) {
        initComponents();
        
        // Setup variables
        mover = new ComponentMover(this, tabsHead);
        tabs = new ArrayList<BrowserFrame>();
        
        // Setup listeners
        addComponentListener(this);
        tabsHead.addTabChangeListener(this);
        
        // Add the default, new tab
        addNewTab();
        
    }
    
    public void addNewTab() {
        String id = UUID.randomUUID().toString();
        BrowserFrame view = new BrowserFrame();
        tabs.add(view);
        panelViews.add(view, id);
        view.setTab(tabsHead.addTab(view.getTitle(), id));
        tabsHead.revalidate();
        repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        tabsHead = new com.wavesoft.webng.ui.Tabs();
        panelViews = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WebNG Experimental Browser");

        tabsHead.setPreferredSize(new java.awt.Dimension(520, 42));
        tabsHead.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabsHeadMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout tabsHeadLayout = new org.jdesktop.layout.GroupLayout(tabsHead);
        tabsHead.setLayout(tabsHeadLayout);
        tabsHeadLayout.setHorizontalGroup(
            tabsHeadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 630, Short.MAX_VALUE)
        );
        tabsHeadLayout.setVerticalGroup(
            tabsHeadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 42, Short.MAX_VALUE)
        );

        panelViews.setOpaque(false);
        panelViews.setLayout(new java.awt.CardLayout());

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelViews, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
            .add(tabsHead, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(tabsHead, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(panelViews, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabsHeadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabsHeadMouseClicked
        if (evt.isConsumed()) return;
        if (evt.getClickCount() > 1) {
            addNewTab();
        }
    }//GEN-LAST:event_tabsHeadMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelViews;
    private javax.swing.JPopupMenu popupMenu;
    private com.wavesoft.webng.ui.Tabs tabsHead;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setVisible(boolean bln) {
        super.setVisible(bln);
        if (bln) {
            tabsHead.repaint();
        }
    }

    @Override
    public void componentResized(ComponentEvent ce) {
        /*
        tabs1.setSize(getWidth(), getPreferredSize().height);
        pageFrame1.setLocation(0, tabs1.getHeight());
        pageFrame1.setSize(getWidth(), getHeight() - tabs1.getHeight());
         */
    }

    @Override
    public void componentMoved(ComponentEvent ce) {
    }

    @Override
    public void componentShown(ComponentEvent ce) {
    }

    @Override
    public void componentHidden(ComponentEvent ce) {
    }

    @Override
    public void tabChanged(int index, String key) {
        CardLayout cl = (CardLayout)(panelViews.getLayout());
        cl.show(panelViews, key);
        tabs.get(index).focusOnLocationBar();
    }

    @Override
    public void tabClosed(int index, String key) {
        tabsHead.removeTab(index);
        BrowserFrame frame = tabs.get(index);
        panelViews.remove(frame);
        tabs.remove(index);
        if (tabs.isEmpty()) System.exit(0);
    }

    @Override
    public void newTab() {
        addNewTab();
    }

    @Override
    public void publicKeyPressed(KeyEvent ke) {
        if (ke.getKeyCode() == KeyEvent.VK_W) {
            
            // Get current tab
            int index = tabsHead.getSelectedTabIndex();
            if (index < 0) return;
            
            // Close it
            tabsHead.removeTab(index);
            BrowserFrame frame = tabs.get(index);
            panelViews.remove(frame);
            tabs.remove(index);
            
            // Update view
            tabsHead.revalidate();
            repaint();
            
            // Exit if we ran out of tabs
            if (tabs.isEmpty()) System.exit(0);
            
        } else if (ke.getKeyCode() == KeyEvent.VK_T) {
            
            addNewTab();
            
        }
    }

    @Override
    public void publicKeyReleased(KeyEvent ke) {
    }
    
}
